// Copyright 2022 Matt Layher
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Command zedhookd is a receiver for ZFS events generated by the all-zedhook
// ZEDLET.
//
// For more information on ZED and ZEDLETs, see:
// https://manpages.debian.org/unstable/zfs-zed/zed.8.en.html.
package main

import (
	"context"
	"log"
	"os"
	"os/signal"

	"github.com/mdlayher/zedhook/internal/zedhook"
)

func main() {
	ctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt)
	defer cancel()

	// TODO(mdlayher): make configurable.
	s, err := zedhook.NewStorage(ctx, "zedhookd.db")
	if err != nil {
		log.Fatalf("failed to open storage: %v", err)
	}
	defer s.Close()

	var (
		ll  = log.New(os.Stderr, "", log.LstdFlags)
		srv = zedhook.NewServer(zedhook.NewHandler(s, ll), ll)
	)

	if err := srv.Serve(ctx); err != nil {
		ll.Fatalf("failed to serve zedhookd: %v", err)
	}
}
